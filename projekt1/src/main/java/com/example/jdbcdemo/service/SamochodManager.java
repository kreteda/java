package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Samochod;

public class SamochodManager {

    private Connection connection;

    private String url = "jdbc:hsqldb:hsql://localhost/workdb";

    private String createTableSamochod = "CREATE TABLE Samochod(Samochod_id bigint GENERATED BY DEFAULT AS IDENTITY, imie varchar(20), gatunek varchar(20), gatunek varchar(20), opiekun_id bigint, wlasciciel_id bigint)";

    private PreparedStatement DodajSamochod;
    private PreparedStatement UsunSamochody;
    private PreparedStatement UsunSamochod;
    private PreparedStatement PobierzSamochody;
    private PreparedStatement AktualizujSamochod;

    private Statement statement;

    public SamochodManager() {
        try {
            connection = DriverManager.getConnection(url);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null,
                    null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Samochod".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                statement.executeUpdate(createTableSamochod);

            DodajSamochod = connection
                    .prepareStatement("INSERT INTO Samochod (imie, gatunek, data_przyecia, opiekun_id, wlasciciel_id) VALUES (?, ?, ?, ?, ?)");
            UsunSamochody = connection
                    .prepareStatement("DELETE FROM Samochod");
            UsunSamochod = connection
                    .prepareStatement("DELETE FROM Samochod WHERE Samochod_id = ?");
            PobierzSamochody = connection
                    .prepareStatement("SELECT Samochod_id, imie, gatunek, data_przyjecia, opiekun_id, wlasciciel_id FROM Samochod");
            AktualizujSamochod = connection
                    .prepareStatement("UPDATE Samochod SET imie = ?, gatunek = ?, data_przyjecia = ?, opiekun_id = ?, wlasciciel_id = ? WHERE Samochod_id = ?");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    Connection getConnection() {
        return connection;
    }

    void wyczyscSamochodta() {
        try {
            UsunSamochody.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public int UsunSamochod(Samochod Samochod) {
        int count = 0;
        try {
            UsunSamochod.setLong(1, Samochod.getId());

            count = UsunSamochod.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    public int DodajSamochod(Samochod Samochod) {
        int count = 0;
        try {
            DodajSamochod.setString(1, Samochod.getImie());
            DodajSamochod.setString(2, Samochod.getGatunek());
            DodajSamochod.setString(3, Samochod.getData_przyjecia());
            DodajSamochod.setLong(4, Samochod.getOpiekun_id());
            DodajSamochod.setLong(5, Samochod.getWlasciciel_id());

            count = DodajSamochod.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

/*	public List<Sprzedawca> GetOpiekunow() {
		List<Sprzedawca> opiekunowie = new ArrayList<Sprzedawca>();

		try {
			ResultSet rs = GetOpiekunow.executeQuery();

			while (rs.next()) {
				Sprzedawca p = new Sprzedawca();
				p.setId(rs.getInt("opiekun_id"));
				p.setImie(rs.getString("imie"));
				p.setNazwisko(rs.getString("nazwisko"));
				p.setNr(rs.getInt("nr_tel"));
				opiekunowie.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return opiekunowie;
	} */

    public List<Samochod> PobierzSamochody(){
        List<Samochod> Samochodta = new ArrayList<Samochod>();

        try{
            ResultSet rs = PobierzSamochody.executeQuery();

            while(rs.next()){
                Samochod z = new Samochod();
                z.setId(rs.getLong("Samochod_id"));
                z.setImie(rs.getString("imie"));
                z.setGatunek(rs.getString("gatunek"));
                z.setData_przyjecia(rs.getString("data_przyjecia"));
                z.setOpiekun_id(rs.getLong("opiekun_id"));
                z.setWlasciciel_id(rs.getLong("wlasciciel_id"));
                Samochodta.add(z);
            }
        } catch(SQLException e){
            e.printStackTrace();
        }
        return Samochodta;
    }

    public int AktualizujSamochod(Samochod Samochod){
        int count = 0;
        try{
            AktualizujSamochod.setString(1, Samochod.getImie());
            AktualizujSamochod.setString(2, Samochod.getGatunek());
            AktualizujSamochod.setLong(3, Samochod.getId());
            AktualizujSamochod.setString(4, Samochod.getData_przyjecia());
            AktualizujSamochod.setLong(5, Samochod.getOpiekun_id());
            AktualizujSamochod.setLong(6, Samochod.getWlasciciel_id());


            count = AktualizujSamochod.executeUpdate();
        }catch(SQLException e){
            e.printStackTrace();
        }
        return count;
    }

}
